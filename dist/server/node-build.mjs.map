{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/plaid.ts","../../server/routes/upload.ts","../../server/routes/payment.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { Request, Response } from \"express\";\n\n// Plaid configuration using provided credentials\nconst PLAID_CLIENT_ID = \"670d967ef5ca2b001925eee0\";\nconst PLAID_SECRET = \"b5caf79d242c0fd40a939924c8ef96\";\nconst PLAID_ENV = \"sandbox\"; // Change to 'production' for live\n\ninterface PlaidLinkTokenRequest {\n  business_id: string;\n  user_id: string;\n  business_name: string;\n}\n\ninterface PlaidLinkTokenResponse {\n  link_token: string;\n  expiration: string;\n  request_id: string;\n}\n\nexport const handleCreateLinkToken = async (req: Request, res: Response) => {\n  try {\n    const { business_id, user_id, business_name } = req.body;\n\n    console.log(\"Creating Plaid link token for:\", {\n      business_id,\n      user_id,\n      business_name,\n    });\n\n    // Create Plaid Link Token following proper API structure\n    const linkTokenRequest = {\n      client_id: PLAID_CLIENT_ID,\n      secret: PLAID_SECRET,\n      user: {\n        // This should correspond to a unique id for the current user\n        client_user_id: user_id || `user_${business_id}`,\n      },\n      client_name: business_name || \"ROAM Business\",\n      products: [\"auth\"],\n      language: \"en\",\n      webhook: `${process.env.URL || \"https://your-domain.com\"}/api/plaid/webhook`,\n      redirect_uri: null, // Not needed for web integration\n      country_codes: [\"US\"],\n      account_filters: {\n        depository: {\n          account_subtypes: [\"checking\", \"savings\"],\n        },\n      },\n    };\n\n    console.log(\n      \"Sending request to Plaid:\",\n      JSON.stringify(linkTokenRequest, null, 2),\n    );\n\n    // Call Plaid API to create link token\n    const plaidResponse = await fetch(\n      \"https://sandbox.plaid.com/link/token/create\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(linkTokenRequest),\n      },\n    );\n\n    console.log(\"Plaid response status:\", plaidResponse.status);\n\n    if (!plaidResponse.ok) {\n      const errorText = await plaidResponse.text();\n      console.error(\"Plaid API Error Response:\", errorText);\n\n      let errorData;\n      try {\n        errorData = JSON.parse(errorText);\n      } catch (e) {\n        errorData = { error: errorText };\n      }\n\n      return res.status(400).json({\n        error: \"Failed to create Plaid link token\",\n        details: errorData,\n        status: plaidResponse.status,\n        statusText: plaidResponse.statusText,\n      });\n    }\n\n    const plaidData: PlaidLinkTokenResponse = await plaidResponse.json();\n    console.log(\"Plaid link token created successfully:\", plaidData.request_id);\n\n    return res.json({\n      link_token: plaidData.link_token,\n      expiration: plaidData.expiration,\n      request_id: plaidData.request_id,\n    });\n  } catch (error) {\n    console.error(\"Plaid Integration Error:\", error);\n    return res.status(500).json({\n      error: \"Internal server error\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n\nexport const handleExchangeToken = async (req: Request, res: Response) => {\n  try {\n    const { public_token, business_id, account_id, institution } = req.body;\n\n    console.log(\"Exchanging Plaid public token for:\", {\n      business_id,\n      account_id,\n      institution,\n    });\n\n    // Exchange public token for access token\n    const exchangeRequest = {\n      client_id: PLAID_CLIENT_ID,\n      secret: PLAID_SECRET,\n      public_token: public_token,\n    };\n\n    const exchangeResponse = await fetch(\n      \"https://sandbox.plaid.com/link/token/exchange\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(exchangeRequest),\n      },\n    );\n\n    if (!exchangeResponse.ok) {\n      const errorData = await exchangeResponse.json();\n      console.error(\"Plaid Exchange Error:\", errorData);\n      return res.status(400).json({\n        error: \"Failed to exchange public token\",\n        details: errorData,\n      });\n    }\n\n    const exchangeData = await exchangeResponse.json();\n\n    // Get account details\n    const accountRequest = {\n      client_id: PLAID_CLIENT_ID,\n      secret: PLAID_SECRET,\n      access_token: exchangeData.access_token,\n    };\n\n    const accountResponse = await fetch(\n      \"https://sandbox.plaid.com/accounts/get\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(accountRequest),\n      },\n    );\n\n    if (!accountResponse.ok) {\n      const errorData = await accountResponse.json();\n      console.error(\"Plaid Account Error:\", errorData);\n      return res.status(400).json({\n        error: \"Failed to get account details\",\n        details: errorData,\n      });\n    }\n\n    const accountData = await accountResponse.json();\n\n    // TODO: Here you would integrate with Stripe to create an external account\n    // and save the bank account information to your database\n\n    return res.json({\n      success: true,\n      access_token: exchangeData.access_token,\n      item_id: exchangeData.item_id,\n      accounts: accountData.accounts,\n      message: \"Bank account connected successfully\",\n    });\n  } catch (error) {\n    console.error(\"Plaid Exchange Error:\", error);\n    return res.status(500).json({\n      error: \"Internal server error\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n","import { Request, Response } from \"express\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport multer from \"multer\";\n\n// Initialize Supabase with service role key to bypass RLS\nconst supabaseUrl = process.env.VITE_PUBLIC_SUPABASE_URL!;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n// Configure multer for file upload\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB limit\n});\n\nexport const handleFileUpload = upload.single(\"file\");\n\nexport const uploadDocument = async (req: Request, res: Response) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ error: \"No file provided\" });\n    }\n\n    // Generate unique filename\n    const fileExt = req.file.originalname.split(\".\").pop();\n    const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExt}`;\n    const filePath = `business-documents/${fileName}`;\n\n    // Upload file using service role (bypasses RLS)\n    const { data, error } = await supabase.storage\n      .from(\"roam-file-storage\")\n      .upload(filePath, req.file.buffer, {\n        contentType: req.file.mimetype,\n        cacheControl: \"3600\",\n        upsert: false,\n      });\n\n    if (error) {\n      console.error(\"Upload error:\", error);\n      return res.status(500).json({ error: error.message });\n    }\n\n    // Get public URL\n    const {\n      data: { publicUrl },\n    } = supabase.storage.from(\"roam-file-storage\").getPublicUrl(filePath);\n\n    res.json({\n      success: true,\n      publicUrl,\n      filePath: data.path,\n    });\n  } catch (error: any) {\n    console.error(\"Upload endpoint error:\", error);\n    res.status(500).json({ error: error.message });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport Stripe from \"stripe\";\n\nexport const createPaymentIntent: RequestHandler = async (req, res) => {\n  try {\n    console.log(\"üí≥ Payment Intent Request:\", {\n      method: req.method,\n      headers: req.headers,\n      body: req.body,\n    });\n\n    const {\n      bookingId,\n      totalAmount,\n      serviceFee,\n      customerEmail,\n      customerName,\n      businessName,\n      serviceName,\n    } = req.body;\n\n    console.log(\"üí≥ Extracted values:\", {\n      bookingId,\n      totalAmount,\n      serviceFee,\n      customerEmail,\n      customerName,\n      businessName,\n      serviceName,\n    });\n\n    if (!bookingId || !totalAmount || !customerEmail) {\n      console.log(\"‚ùå Missing required fields:\", {\n        bookingId,\n        totalAmount,\n        customerEmail,\n      });\n      return res.status(400).json({\n        error: \"Booking ID, total amount, and customer email are required\",\n      });\n    }\n\n    // Validate totalAmount is a number\n    const amount =\n      typeof totalAmount === \"string\" ? parseFloat(totalAmount) : totalAmount;\n    if (isNaN(amount) || amount <= 0) {\n      console.log(\"‚ùå Invalid amount:\", { totalAmount, parsedAmount: amount });\n      return res.status(400).json({\n        error: \"Total amount must be a valid positive number\",\n      });\n    }\n\n    // Check if Stripe secret key is available\n    if (!process.env.STRIPE_SECRET_KEY) {\n      console.log(\"‚ùå Stripe secret key not configured\");\n      return res.status(500).json({\n        error:\n          \"Stripe secret key not configured. Please set STRIPE_SECRET_KEY environment variable.\",\n      });\n    }\n\n    console.log(\"‚úÖ Stripe secret key is configured\");\n\n    // Initialize Stripe with proper ES import\n    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2024-12-18.acacia\",\n    });\n\n    // Convert to cents (Stripe expects amounts in cents)\n    const amountInCents = Math.round(amount * 100);\n    console.log(\"üí∞ Amount calculation:\", {\n      originalAmount: amount,\n      amountInCents,\n    });\n\n    // Create payment intent\n    console.log(\"üöÄ Creating payment intent with Stripe...\");\n    console.log(\n      \"üçé Apple Pay should be available with automatic_payment_methods enabled\",\n    );\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: amountInCents,\n      currency: \"usd\",\n      metadata: {\n        booking_id: bookingId,\n        service_fee: serviceFee\n          ? (parseFloat(serviceFee) * 100).toString()\n          : \"0\",\n        customer_name: customerName || \"\",\n        customer_email: customerEmail || \"\",\n        business_name: businessName || \"\",\n        service_name: serviceName || \"\",\n        payment_type: \"booking_payment\",\n      },\n      description: `Booking payment for ${serviceName || \"service\"} at ${businessName || \"business\"}`,\n      receipt_email: customerEmail,\n      automatic_payment_methods: {\n        enabled: true,\n        allow_redirects: \"never\",\n      },\n    });\n\n    console.log(\"‚úÖ Payment intent created successfully:\", {\n      id: paymentIntent.id,\n      amount: paymentIntent.amount,\n      currency: paymentIntent.currency,\n      status: paymentIntent.status,\n      automatic_payment_methods: paymentIntent.automatic_payment_methods,\n      payment_method_types: paymentIntent.payment_method_types,\n    });\n\n    res.status(200).json({\n      clientSecret: paymentIntent.client_secret,\n      paymentIntentId: paymentIntent.id,\n      amount: amount,\n      currency: \"usd\",\n    });\n  } catch (error: any) {\n    console.error(\"Error creating payment intent:\", error);\n    res.status(500).json({\n      error: \"Failed to create payment intent\",\n      details: error.message,\n    });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleCreateLinkToken, handleExchangeToken } from \"./routes/plaid\";\nimport { handleFileUpload, uploadDocument } from \"./routes/upload\";\nimport { createPaymentIntent } from \"./routes/payment\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Plaid integration routes\n  app.post(\"/api/plaid/create-link-token\", handleCreateLinkToken);\n  app.post(\"/api/plaid/exchange-token\", handleExchangeToken);\n\n  // File upload route\n  app.post(\"/api/upload-document\", handleFileUpload, uploadDocument);\n\n  // Payment routes\n  app.post(\"/api/create-payment-intent\", createPaymentIntent);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`üöÄ Fusion Starter server running on port ${port}`);\n  console.log(`üì± Frontend: http://localhost:${port}`);\n  console.log(`üîß API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"üõë Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"üõë Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}