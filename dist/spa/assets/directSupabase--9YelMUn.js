var S=Object.defineProperty;var C=(g,t,s)=>t in g?S(g,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):g[t]=s;var $=(g,t,s)=>C(g,typeof t!="symbol"?t+"":t,s);const E="https://vssomyuyhicaxsgiaupo.supabase.co",v="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZzc29teXV5aGljYXhzZ2lhdXBvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0NTM3MTUsImV4cCI6MjA2OTAyOTcxNX0.c4JrNgMGsrCaFP2VrF4pL6iUG8Ub8Hkcrm5345r7KHs";class _{constructor(){$(this,"baseURL");$(this,"apiKey");$(this,"accessToken",null);this.baseURL=E,this.apiKey=v}getHeaders(t=!1){const s={apikey:this.apiKey,"Content-Type":"application/json"};return t&&this.accessToken?s.Authorization=`Bearer ${this.accessToken}`:s.Authorization=`Bearer ${this.apiKey}`,s}async signInWithPassword(t,s){const e=await fetch(`${this.baseURL}/auth/v1/token?grant_type=password`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify({email:t,password:s})});let r="";try{r=await e.text()}catch(o){console.warn("Could not read response text:",o),r=`HTTP ${e.status} - ${e.statusText}`}if(!e.ok)throw new Error(`Authentication failed: ${r}`);let a;try{a=JSON.parse(r)}catch{throw new Error(`Invalid response format: ${r}`)}return this.accessToken=a.access_token,a}async getProviderByUserId(t){const s=await fetch(`${this.baseURL}/rest/v1/providers?user_id=eq.${t}&is_active=eq.true&select=id,user_id,business_id,location_id,first_name,last_name,email,provider_role,is_active`,{headers:this.getHeaders(!0)}),e=await s.text();if(!s.ok)throw new Error(`Provider lookup failed: ${e}`);let r;try{r=JSON.parse(e)}catch{throw new Error(`Invalid response format: ${e}`)}return r.length>0?r[0]:null}async signOut(){if(this.accessToken)try{await fetch(`${this.baseURL}/auth/v1/logout`,{method:"POST",headers:this.getHeaders(!0)})}catch(t){console.warn("Logout request failed:",t)}finally{this.accessToken=null}}getCurrentUser(){return null}async getSession(){try{if(!this.accessToken)return console.log("No access token available for session check"),null;const t=await fetch(`${this.baseURL}/auth/v1/user`,{headers:this.getHeaders(!0)});return t.ok?{user:await t.json()}:(console.log("Session check failed:",t.status,t.statusText),this.accessToken=null,null)}catch(t){return console.log("Get session error:",t),this.accessToken=null,null}}get currentAccessToken(){return this.accessToken}set currentAccessToken(t){this.accessToken=t}async testBucketAccess(t){try{const s=await fetch(`${this.baseURL}/storage/v1/bucket/${t}`,{method:"GET",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`}});return console.log("Bucket test response:",{status:s.status,statusText:s.statusText,bucket:t}),s.ok}catch(s){return console.error("Bucket test error:",s),!1}}async uploadFile(t,s,e){var w;console.log("Upload request debug:",{bucket:t,path:s,fileName:e.name,fileSize:e.size,fileType:e.type,baseURL:this.baseURL,hasApiKey:!!this.apiKey,hasAccessToken:!!this.accessToken,accessTokenLength:((w=this.accessToken)==null?void 0:w.length)||0});const r=new FormData;r.append("",e);const a={apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`};console.log("Request headers:",{...a,Authorization:this.accessToken?`Bearer [TOKEN_${this.accessToken.substring(0,10)}...]`:`Bearer [API_KEY_${this.apiKey.substring(0,10)}...]`});const o=await fetch(`${this.baseURL}/storage/v1/object/${t}/${s}`,{method:"POST",headers:a,body:r});if(console.log("Upload response debug:",{status:o.status,statusText:o.statusText,url:`${this.baseURL}/storage/v1/object/${t}/${s}`,bucket:t,path:s,hasAuthToken:!!this.accessToken,headers:Object.fromEntries(o.headers.entries())}),!o.ok){let p=o.statusText||`HTTP ${o.status}`,d=null;try{if(o.body&&!o.bodyUsed){const i=await o.text();if(i)try{d=JSON.parse(i),p=i}catch{p=i}}}catch(i){console.warn("Could not read error response body:",i)}let u=`Upload failed (${o.status})`;throw o.status===400?p.includes("row-level security policy")?u="Access denied: You don't have permission to upload files to this location. Please contact support.":p.includes("violates foreign key constraint")?u="Upload failed: Invalid business or profile reference. Please try refreshing the page.":p.includes("File too large")?u="Upload failed: File is too large. Please choose a smaller file.":u=`Upload failed: Invalid request. ${(d==null?void 0:d.message)||p}`:o.status===401?u="Upload failed: You are not authorized. Please sign in again.":o.status===403?u="Upload failed: Access forbidden. Please check your permissions.":o.status===413?u="Upload failed: File is too large. Please choose a smaller file.":o.status===422?u="Upload failed: Invalid file type or format.":u=`Upload failed: ${(d==null?void 0:d.message)||p}`,console.error("Upload error details:",{status:o.status,statusText:o.statusText,bucket:t,path:s,errorDetails:p,parsedError:d}),new Error(u)}let c={Key:null};try{if(o.body&&!o.bodyUsed){const p=await o.text();p&&(c=JSON.parse(p))}}catch(p){console.warn("Could not parse upload response:",p)}const m=`${this.baseURL}/storage/v1/object/public/${t}/${s}`;return{path:c.Key||s,publicUrl:m}}async deleteFile(t,s){const e=await fetch(`${this.baseURL}/storage/v1/object/${t}/${s}`,{method:"DELETE",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`}}),r=await e.text();e.ok||console.warn(`Delete failed: ${r}`)}async updateProviderImage(t,s){const e=await fetch(`${this.baseURL}/rest/v1/providers?id=eq.${t}`,{method:"PATCH",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`,"Content-Type":"application/json",Prefer:"return=minimal"},body:JSON.stringify({image_url:s})}),r=await e.text();if(!e.ok)throw new Error(`Database update failed: ${r}`)}async updateProviderBannerImage(t,s){const e=await fetch(`${this.baseURL}/rest/v1/providers?id=eq.${t}`,{method:"PATCH",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`,"Content-Type":"application/json",Prefer:"return=minimal"},body:JSON.stringify({cover_image_url:s})}),r=await e.text();if(!e.ok)throw new Error(`Database update failed: ${r}`)}async updateBusinessCoverImage(t,s){const e=await fetch(`${this.baseURL}/rest/v1/business_profiles?id=eq.${t}`,{method:"PATCH",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`,"Content-Type":"application/json",Prefer:"return=minimal"},body:JSON.stringify({cover_image_url:s})}),r=await e.text();if(!e.ok)throw new Error(`Database update failed: ${r}`)}async updateBusinessProfile(t,s){const e=await fetch(`${this.baseURL}/rest/v1/business_profiles?id=eq.${t}`,{method:"PATCH",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`,"Content-Type":"application/json",Prefer:"return=minimal"},body:JSON.stringify(s)});let r="";try{r=await e.text()}catch(a){console.warn("Could not read response text:",a),r=`HTTP ${e.status} - ${e.statusText}`}if(!e.ok){let a=r;try{const o=JSON.parse(r);o.message?a=o.message:o.error?a=o.error:o.hint&&(a=o.hint)}catch{}throw console.error("Business profile update failed:",{status:e.status,statusText:e.statusText,responseText:r,errorDetails:a,updateData:JSON.stringify(s,null,2),url:`${this.baseURL}/rest/v1/business_profiles?id=eq.${t}`}),new Error(`Failed to update business profile: HTTP ${e.status} - ${a}`)}}async signUpWithPassword(t,s){const e=await fetch(`${this.baseURL}/auth/v1/signup`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify({email:t,password:s})});let r="";try{r=await e.text()}catch(o){console.warn("Could not read response text:",o),r=`HTTP ${e.status} - ${e.statusText}`}if(!e.ok)throw new Error(`Registration failed: ${r}`);let a;try{a=JSON.parse(r)}catch{throw new Error(`Invalid response format: ${r}`)}return a.access_token&&(this.accessToken=a.access_token),a}async getCustomerByUserId(t){const s=await fetch(`${this.baseURL}/rest/v1/customers?user_id=eq.${t}&is_active=eq.true&select=id,user_id,first_name,last_name,email,phone,is_active`,{headers:this.getHeaders(!0)});let e="";try{e=await s.text()}catch(a){console.warn("Could not read response text:",a),e=`HTTP ${s.status} - ${s.statusText}`}if(!s.ok)throw new Error(`Customer lookup failed: ${e}`);let r;try{r=JSON.parse(e)}catch{throw new Error(`Invalid response format: ${e}`)}return r.length>0?r[0]:null}async createCustomerProfile(t){const s=await fetch(`${this.baseURL}/rest/v1/customers`,{method:"POST",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`,"Content-Type":"application/json",Prefer:"return=representation"},body:JSON.stringify({...t,is_active:!0,total_bookings:0,total_spent:0,loyalty_points:0,preferred_communication:"email"})});let e="";try{e=await s.text()}catch(a){console.warn("Could not read response text:",a),e=`HTTP ${s.status} - ${s.statusText}`}if(!s.ok)throw new Error(`Customer profile creation failed: ${e}`);let r;try{r=JSON.parse(e)}catch{throw new Error(`Invalid response format: ${e}`)}if(r.length===0)throw new Error("No customer profile returned after creation");return r[0]}async uploadCustomerAvatar(t,s){const e=s.name.split(".").pop(),a=`avatar-customer-user/${`${t}-${Date.now()}.${e}`}`,o=new FormData;o.append("",s);const c=await fetch(`${this.baseURL}/storage/v1/object/roam-file-storage/${a}`,{method:"POST",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`},body:o}),m=await c.text();if(!c.ok)throw new Error(`Avatar upload failed: ${m}`);const w=`${this.baseURL}/storage/v1/object/public/roam-file-storage/${a}`;return{path:a,publicUrl:w}}async updateCustomerProfile(t,s){if(!this.baseURL||!this.apiKey)throw new Error("Supabase configuration is incomplete. Please check your API URL and keys.");console.log("DirectSupabase updateCustomerProfile: Starting update",{customerId:t,updateData:s,baseURL:this.baseURL,hasApiKey:!!this.apiKey,hasAccessToken:!!this.accessToken,tokenLength:this.accessToken?this.accessToken.length:0,userAgent:navigator.userAgent,online:navigator.onLine});const e=async(n,h,l=2)=>{var k,b,P;let f;for(let y=1;y<=l;y++)try{return console.log(`DirectSupabase: Attempt ${y}/${l} for ${n}`),await fetch(n,h)}catch(T){if(f=T,console.warn(`DirectSupabase: Attempt ${y} failed:`,T.message),((k=T.message)!=null&&k.includes("ERR_CONNECTION_CLOSED")||(b=T.message)!=null&&b.includes("Failed to fetch")||(P=T.message)!=null&&P.includes("ERR_NETWORK"))&&(console.log(`DirectSupabase: Network error detected, retrying in ${y*1e3}ms...`),y<l)){await new Promise(x=>setTimeout(x,y*1e3));continue}throw T}throw f};console.log("DirectSupabase updateCustomerProfile: Skipping table access test, proceeding to record check..."),console.log("DirectSupabase updateCustomerProfile: Proceeding with customer profile operation..."),console.log("DirectSupabase updateCustomerProfile: Checking if record exists...");let r;try{r=await e(`${this.baseURL}/rest/v1/customer_profiles?user_id=eq.${t}&select=user_id`,{method:"GET",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.accessToken||this.apiKey}`,"Content-Type":"application/json"}})}catch(n){throw console.error("DirectSupabase updateCustomerProfile: Network error during record check:",n),new Error(`Connection failed to Supabase. Please check your internet connection and try again. Error: ${n.message}`)}const a=await r.text();console.log("DirectSupabase updateCustomerProfile: Check response",{status:r.status,responseText:a});let o=!1;if(r.ok)try{const n=JSON.parse(a);o=Array.isArray(n)&&n.length>0,console.log("DirectSupabase updateCustomerProfile: Record exists:",o)}catch(n){console.log("DirectSupabase updateCustomerProfile: Check parse error:",n)}let c,m="anon";const w=async(n=!1)=>{const l=`Bearer ${n&&this.accessToken?this.accessToken:this.apiKey}`;console.log(`DirectSupabase updateCustomerProfile: Trying with ${n?"user token":"anon key"}`);const f={apikey:this.apiKey,Authorization:l,"Content-Type":"application/json",Prefer:"return=minimal"};return o?(console.log("DirectSupabase updateCustomerProfile: Updating existing record..."),await e(`${this.baseURL}/rest/v1/customer_profiles?user_id=eq.${t}`,{method:"PATCH",headers:f,body:JSON.stringify(s)})):(console.log("DirectSupabase updateCustomerProfile: Creating new record..."),await e(`${this.baseURL}/rest/v1/customer_profiles`,{method:"POST",headers:f,body:JSON.stringify({user_id:t,...s,is_active:!0,email_notifications:!0,sms_notifications:!0,push_notifications:!0,marketing_emails:!1,email_verified:!1,phone_verified:!1})}))},p=async n=>{try{if(n.body===null)return`HTTP ${n.status} - ${n.statusText}`;const h=await n.text();return!h||h.trim()===""?`HTTP ${n.status} - ${n.statusText}`:h}catch(h){return console.warn("Could not read response text:",h),`HTTP ${n.status} - ${n.statusText} (read error: ${h.message})`}},d=async(n=!1)=>{const h=await w(n),l=await p(h);return{response:h,text:l}};let u=await d(!1);c=u.response;let i=u.text;if(!c.ok&&(c.status===401||c.status===403)&&(this.accessToken?(console.log("DirectSupabase updateCustomerProfile: Anon key failed, trying with user token..."),m="user",u=await d(!0),c=u.response,i=u.text):console.log("DirectSupabase updateCustomerProfile: No user token available for fallback")),console.log("DirectSupabase updateCustomerProfile: Response",{status:c.status,statusText:c.statusText,responseText:i,responseTextType:typeof i,responseTextLength:i==null?void 0:i.length,ok:c.ok,operation:o?"UPDATE":"CREATE",authMethod:m,customerId:t,updateData:s}),c.ok)console.log(`DirectSupabase updateCustomerProfile: Record ${o?"updated":"created"} successfully`);else{if(c.status===401)throw console.error("DirectSupabase updateCustomerProfile: Authentication failed"),this.accessToken=null,new Error("Authentication failed. Please sign in again.");if(i.includes('relation "customer_profiles" does not exist'))throw console.error("DirectSupabase updateCustomerProfile: customer_profiles table does not exist"),new Error("Customer profiles table does not exist in the database. Please contact support.");if(i.includes("permission denied")||i.includes("RLS"))throw console.error("DirectSupabase updateCustomerProfile: Permission denied or RLS policy issue"),new Error("Permission denied: Unable to access customer profiles. Please contact support.");if(c.status===409){let l;try{typeof i=="string"?l=i:i&&typeof i=="object"?l=i.message||i.error||i.details||JSON.stringify(i):l=`HTTP ${c.status} - ${c.statusText}`}catch(f){console.warn("Error processing response text:",f),l=`HTTP ${c.status} - ${c.statusText}`}throw console.error("DirectSupabase updateCustomerProfile: HTTP 409 Conflict detected",{originalResponseText:i,responseTextType:typeof i,processedErrorMessage:l,updateData:s,customerId:t,recordExists:o}),l.includes("user_id")&&l.includes("foreign key")?new Error(`User account (${t}) is no longer valid in the authentication system. Please sign in again.`):l.includes("unique")||l.includes("duplicate")?new Error("A customer profile already exists for this user. Please refresh the page and try again."):l.includes("violates")&&l.includes("constraint")?new Error(`Database constraint violation: ${l}. This may indicate a data integrity issue.`):new Error(`Database conflict occurred: ${l}. Please try again or contact support.`)}const n=o?"update":"create";console.error(`DirectSupabase updateCustomerProfile: Failed to ${n} record`,{status:c.status,responseText:i,updateData:s,customerId:t});const h=typeof i=="string"?i:i?JSON.stringify(i):c.statusText||`HTTP ${c.status}`;throw new Error(`Failed to ${n} customer profile: HTTP ${c.status} - ${h}`)}}async createCustomerProfileRecord(t,s){console.log("DirectSupabase createCustomerProfileRecord: Starting creation",{customerId:t,profileData:s,hasAccessToken:!!this.accessToken}),console.log("DirectSupabase createCustomerProfileRecord: Using anon key...");const e=await fetch(`${this.baseURL}/rest/v1/customer_profiles`,{method:"POST",headers:{apikey:this.apiKey,Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json",Prefer:"return=minimal"},body:JSON.stringify({user_id:t,...s,is_active:!0,email_notifications:!0,sms_notifications:!0,push_notifications:!0,marketing_emails:!1,email_verified:!1,phone_verified:!1})});let r="";try{r=await e.text()}catch(a){console.warn("Could not read response text:",a),r=`HTTP ${e.status} - ${e.statusText}`}if(console.log("DirectSupabase createCustomerProfileRecord: Response",{status:e.status,statusText:e.statusText,responseText:r,ok:e.ok}),e.ok)console.log("DirectSupabase createCustomerProfileRecord: Creation successful");else throw e.status===401?(console.error("DirectSupabase createCustomerProfileRecord: Authentication failed"),this.accessToken=null,new Error("Authentication failed. Please sign in again.")):new Error(`Customer profile creation failed: HTTP ${e.status} - ${r}`)}}const A=new _;export{A as directSupabaseAPI};
